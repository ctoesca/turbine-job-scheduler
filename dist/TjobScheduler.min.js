"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const turbine=require("../../../../turbine2/trunk/dist"),Promise=require("bluebird"),cron=require("cron"),request=require("request");class TjobScheduler extends turbine.services.TbaseService{constructor(e,s){super(e,s),this.refreshTimer=new turbine.tools.Ttimer({delay:1e3*this.config.refreshInterval}),this.refreshTimer.on(turbine.tools.Ttimer.ON_TIMER,this.onRefreshTimer,this)}getDefaultConfig(){return{active:!0,userAgent:"turbine",executionPolicy:"one_in_cluster",refreshInterval:60,url:{start_job:"http://localhost:82/apis/robotop/1.0/schedules/{scheduleId}/start",get_schedules:"http://localhost:82/apis/robotop/1.0/schedules?where=active=1 AND type='cron'"},api_username:"turbine-server",api_password:"s3#cr3t",api_key:null,taskNameFunction:function(e){return e.task_name},workDir:__dirname+"/tmp/TjobScheduler"}}flatify(){return new Promise(function(e,s){e({})}.bind(this))}getSchedules(){return new Promise(function(e,s){var t=this.config.url.get_schedules,i={strictSSL:!1,json:!0,headers:{"User-Agent":this.config.userAgent}};this.config.api_key?t+="&ticket="+this.config.api_key:this.config.api_username&&this.config.api_password&&(i.auth={user:this.config.api_username,pass:this.config.api_password,sendImmediately:!0}),request.get(t,i,function(i,r,o){i?s("Http GET error="+i+", url="+t):r&&r.statusCode<400?e(o.data):s("Http POST status="+r.statusCode+", body="+o+", url="+t)}.bind(this))}.bind(this))}getTaskName(e){return this.config.taskNameFunction(e)}scheduleAllJobs(){return this.getSchedules().then(function(e){if(void 0!==e){for(var s in this.schedules)this.schedules[s].valid=0;for(var t=0;t<e.length;t++){var i=e[t],r={valid:1,schedule:i,job:null};this.schedules[i.id]?this.schedules[i.id].schedule.data.cron!=i.data.cron?(this.logger.info("scheduleAllJobs","TASK '"+this.getTaskName(i)+"' : re-planification car le cron a changé: "+i.data.cron),this.schedules[i.id].job.stop(),this.scheduleJob(r)):(this.schedules[i.id].schedule=i,this.schedules[i.id].valid=1):(this.logger.info("scheduleAllJobs","TASK '"+this.getTaskName(i)+"' : planification de cron "+i.data.cron),this.scheduleJob(r))}for(var s in this.schedules)0==this.schedules[s].valid&&(this.logger.info("scheduleAllJobs","TASK '"+this.getTaskName(this.schedules[s].schedule)+"' : dé-planification du cron "+this.schedules[s].schedule.data.cron),this.schedules[s].job.stop(),delete this.schedules[s])}else this.logger.error("schedules is undefined")}.bind(this),function(e){this.logger.error("scheduleAllJobs",e)}.bind(this))}start(){this.active&&(this.scheduleAllJobs(),this.refreshTimer.start(),super.start())}stop(){this.refreshTimer.stop(),this.cancelAllJobs(),super.stop()}execBatch(e){if(!this.refreshTimer.running)return this.logger.error("annulé"),void this.cancelAllJobs();var s=this.config.url.start_job.replace(/\{scheduleId\}/g,e.schedule.id),t={strictSSL:!1,json:!0,headers:{"User-Agent":this.config.userAgent}};this.config.api_key?s+="?ticket="+this.config.api_key:this.config.api_username&&this.config.api_password&&(t.auth={user:this.config.api_username,pass:this.config.api_password,sendImmediately:!0}),request.post(s,t,function(t,i,r){var o=this.getTaskName(e.schedule);t?this.logger.error("EXECTASK '"+o+"': Http GET error="+t+", url="+s):i&&i.statusCode<400?this.logger.info("EXECTASK '"+o+"': STARTED"):this.logger.error("EXECTASK '"+o+"': Http GET status="+i.statusCode+", body="+r+", url="+s)}.bind(this))}onRefreshTimer(){this.scheduleAllJobs()}scheduleJob(e){try{e.job=new cron.CronJob(e.schedule.data.cron,this.execBatch.bind(this,e),function(){},!0),this.schedules[e.schedule.id]=e}catch(s){this.logger.warn({err:s},"Failed to schedule task '"+this.getTaskName(e.schedule)+"' "+e.schedule.data.cron+" : "+s)}return e.job}cancelAllJobs(){for(var e in this.schedules)try{this.schedules[e].job.stop(),this.logger.info("cancel job "+e+": OK")}catch(s){this.logger.error("cancel job "+e+": "+s.toString())}this.schedules={}}}exports.TjobScheduler=TjobScheduler;
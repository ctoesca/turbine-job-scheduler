"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const turbine=require("turbine"),Promise=require("bluebird"),cron=require("cron"),request=require("request");class TjobScheduler extends turbine.services.TbaseService{constructor(e,s){super(e,s),this.refreshTimer=new turbine.tools.Ttimer({delay:1e3*this.config.refreshInterval}),this.refreshTimer.on(turbine.tools.Ttimer.ON_TIMER,this.onRefreshTimer,this)}getDefaultConfig(){return{active:!0,userAgent:"turbine",executionPolicy:"one_in_cluster",refreshInterval:60,url:{start_job:"http://localhost:82/apis/robotop/1.0/schedules/{scheduleId}/start",get_cron_schedules:"http://localhost:82/apis/robotop/1.0/schedules?where=active=1 AND type='cron'",check:"http://localhost:82/apis/robotop/1.0/schedules/check"},api_username:"turbine-server",api_password:"s3#cr3t",api_key:null,taskNameFunction:function(e){return e.task_name},workDir:__dirname+"/tmp/TjobScheduler"}}flatify(){return new Promise(function(e,s){e({})}.bind(this))}request(e,s){return new Promise(function(t,i){var r={url:s,method:e,strictSSL:!1,json:!0,headers:{"User-Agent":this.config.userAgent}};this.config.api_key?r.url+="&ticket="+this.config.api_key:this.config.api_username&&this.config.api_password&&(r.auth={user:this.config.api_username,pass:this.config.api_password,sendImmediately:!0}),request(r,function(r,h,o){if(r)i(c="Http "+e+" "+s+" error="+r);else if(h&&h.statusCode<400)t(o);else{var c="Http "+e+" "+s+" status="+h.statusCode+", body="+o;i(c)}}.bind(this))}.bind(this))}getTaskName(e){return this.config.taskNameFunction(e)}scheduleAllJobs(){return this.request("POST",this.config.url.check).then(function(e){return this.request("GET",this.config.url.get_cron_schedules)}.bind(this)).then(function(e){if(void 0!==e.data){var s=e.data;for(var t in this.schedules)this.schedules[t].valid=0;for(var i=0;i<s.length;i++){var r=s[i],h={valid:1,schedule:r,job:null};this.schedules[r.id]?this.schedules[r.id].schedule.data.cron!=r.data.cron?(this.logger.info("scheduleAllJobs","TASK '"+this.getTaskName(r)+"' : re-planification car le cron a changé: "+r.data.cron),this.schedules[r.id].job.stop(),this.scheduleJob(h)):(this.schedules[r.id].schedule=r,this.schedules[r.id].valid=1):(this.logger.info("scheduleAllJobs","TASK '"+this.getTaskName(r)+"' : planification de cron "+r.data.cron),this.scheduleJob(h))}for(var t in this.schedules)0==this.schedules[t].valid&&(this.logger.info("scheduleAllJobs","TASK '"+this.getTaskName(this.schedules[t].schedule)+"' : dé-planification du cron "+this.schedules[t].schedule.data.cron),this.schedules[t].job.stop(),delete this.schedules[t])}else this.logger.error("schedules is undefined")}.bind(this)).catch(function(e){this.logger.error("scheduleAllJobs",e)}.bind(this))}start(){this.active&&(this.scheduleAllJobs(),this.refreshTimer.start(),super.start())}stop(){this.refreshTimer.stop(),this.cancelAllJobs(),super.stop()}execBatch(e){if(!this.refreshTimer.running)return this.logger.error("annulé"),void this.cancelAllJobs();var s=this.config.url.start_job.replace(/\{scheduleId\}/g,e.schedule.id);return this.request("POST",s).then(function(s){var t=this.getTaskName(e.schedule);this.logger.info("EXECTASK '"+t+"': STARTED")}.bind(this)).catch(function(e){this.logger.error("EXECTASK",e)}.bind(this))}onRefreshTimer(){this.scheduleAllJobs()}scheduleJob(e){try{e.job=new cron.CronJob(e.schedule.data.cron,this.execBatch.bind(this,e),function(){},!0),this.schedules[e.schedule.id]=e}catch(s){this.logger.warn({err:s},"Failed to schedule task '"+this.getTaskName(e.schedule)+"' "+e.schedule.data.cron+" : "+s)}return e.job}cancelAllJobs(){for(var e in this.schedules)try{this.schedules[e].job.stop(),this.logger.info("cancel job "+e+": OK")}catch(s){this.logger.error("cancel job "+e+": "+s.toString())}this.schedules={}}}exports.TjobScheduler=TjobScheduler;